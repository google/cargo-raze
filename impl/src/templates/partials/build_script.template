rust_binary(
    name = "{{ crate_name_sanitized }}_build_script",
    srcs = glob(["**/*.rs"]),
    {%- if crate.build_script_target.path %}
    crate_root = "{{ crate.build_script_target.path }}",
    {%- else %}
    crate_root = "build.rs",
    {%- endif %}
    deps = [
      {%- for dependency in crate.build_dependencies %}
        "{{workspace.workspace_path}}/vendor/{{dependency.name}}-{{dependency.version}}:{{dependency.name | replace(from="-", to="_") }}",
      {%- endfor %}
    ],
    rustc_flags = [
        "--cap-lints allow",
        "--target={{crate.platform_triple}}",
    ],
    crate_features = [
      {%- for feature in crate.features %}
      "{{feature}}",
      {%- endfor %}
    ],
    data = glob(["*"]),
    version = "{{ crate.pkg_version }}",
    visibility = ["//visibility:private"],
)

genrule(
    name = "{{ crate_name_sanitized  }}_build_script_executor",
    srcs = glob(["*", "**/*.rs"]),
    outs = ["{{ crate_name_sanitized  }}_out_dir_outputs.tar.gz"],
    tools = [":{{ crate_name_sanitized  }}_build_script"],
    local = 1,
    cmd = "mkdir {{ crate_name_sanitized}}_out_dir_outputs/;"
        + " (export CARGO_MANIFEST_DIR=\"$$PWD/{{ workspace.workspace_path | replace(from="//", to="") }}/vendor/{{ crate.pkg_name }}-{{ crate.pkg_version }}\";"
        + " export RUSTC=\"$$PWD/$(location @rust_linux_x86_64//:rustc)\";"
        + " export TARGET='{{ crate.platform_triple }}';"
        + " export RUST_BACKTRACE=1;"
        {%- for feature in crate.features %}
        + " export CARGO_FEATURE_{{ feature | upper | replace(from="-", to="_") }}=1;"
        {%- endfor %}
        + " export OUT_DIR=$$PWD/{{ crate_name_sanitized }}_out_dir_outputs;"
        + " export BINARY_PATH=\"$$PWD/$(location :{{ crate_name_sanitized }}_build_script)\";"
        + " export OUT_TAR=$$PWD/$@;"
        + " cd $$(dirname $(location :Cargo.toml)) && $$BINARY_PATH && tar -czf $$OUT_TAR -C $$OUT_DIR .)"
)
